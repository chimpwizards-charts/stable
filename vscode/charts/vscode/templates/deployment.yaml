apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vscode.fullname" . }}
  labels:
    app: {{ template "vscode.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "vscode.name" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "vscode.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "vscode.fullname" . }}-sa
      # imagePullSecrets:
      #   - name: {{ .Values.global.env_name }}-{{ .Values.global.regsecret }}    
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          resources: 
              requests: 
                  #cpu: 20m 
                  memory: 2Gi 
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          env: 
            - name: PASSWORD
              value: "{{ .Values.password }}"
            - name: STARTUP_SCRIPT
              value: "{{ .Values.startup_script }}"          
            - name: DOCKER_HOST 
              value: tcp://localhost:2375                  
          volumeMounts:
            # - name: dockersock
            #   mountPath: "/var/run/docker.sock"    
            # - name: dockercerts
            #   mountPath: "/certs/client"        
            - name: working
              mountPath: "/var/app"                    
            - name: shared
              mountPath: "/var/data"        

        - name: dind-daemon 
          image: docker:17-dind 
          resources: 
              requests: 
                  #cpu: 20m 
                  memory: 2Gi 
          securityContext: 
              privileged: true 
          # env:
          #   - name: DOCKER_TLS_CERTDIR
          #     value: /certs

          volumeMounts:
            # - name: dockercerts
            #   mountPath: "/certs/client"   
            - name: working
              mountPath: "/var/app"                  
            - name: shared
              mountPath: "/var/data"      
            - name: docker-graph-storage 
              mountPath: /var/lib/docker

      # securityContext:
      #   fsGroup: 118    # Group ID of docker group on k8s nodes.
      volumes:
        # - name: dockersock
        #   hostPath:
        #     path: /var/run/docker.sock       
        - name: docker-graph-storage 
          emptyDir: {}     
        - name: shared 
          emptyDir: {}  
        - name: working 
          emptyDir: {}            


